{"version":3,"sources":["redux/bus/city/types.ts","redux/bus/city/reducer.ts","redux/bus/weather/types.ts","redux/bus/weather/reducer.ts","redux/init/rootReducer.ts","redux/init/middleware.ts","redux/store.ts","components/Layout/Layout.tsx","redux/bus/selectors.ts","redux/helpers.ts","api/index.ts","redux/bus/city/actions.ts","hooks/useGeolocationForm.ts","components/GeolocationForm/GeolocationForm.tsx","hooks/useCurrentWeather.ts","components/CityPreview/CityPreviewItem/CityPreviewItem.tsx","assets/images/empty.png","components/CityPreview/CityPreview.tsx","components/Spinner/Spinner.tsx","utils/dateHelper.ts","components/CurrentWeather/CurrentWeather.tsx","components/Forecast/DayWeather/DayWeather.tsx","components/Forecast/Forecast.tsx","components/CloseIcon/CloseIcon.tsx","pages/Home/Home.tsx","redux/bus/weather/actions.ts","hooks/useCityDetails.ts","pages/CityDetails/CityDetails.tsx","App.tsx","index.tsx"],"names":["SET_GEOLOCATION","SET_CITY_WEATHER","REMOVE_CITY","SET_LOADING","SET_ERROR","initialState","currentGeolocation","cityList","loading","error","SET_CITY","SET_FORECAST","SET_FORECAST_LOADING","city","forecast","forecastLoading","rootReducer","combineReducers","state","action","type","payload","cityIndex","findIndex","newCityList","splice","unshift","newCitiesArr","filter","weather","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Layout","children","className","createWeatherObject","name","temp","main","pressure","humidity","windSpeed","wind","speed","sunrise","sys","sunset","description","icon","lat","coord","lon","createForecastObject","day","dt","wind_speed","apiKey","domain","api","getCurrentWeather","byCoordinates","a","fetch","res","ok","Error","statusText","json","byCity","getForecastWeather","setCityWeather","setLoading","setError","useGeolocationForm","dispatch","useDispatch","useSelector","React","useState","cityInput","setCityInput","getCurrentGeolocation","navigator","geolocation","getCurrentPosition","pos","latitude","coords","longitude","geolocationHandler","cityInputHandler","e","target","value","citySearchHandler","currentWeather","errMessage","Search","Input","GeolocationForm","placeholder","enterButton","size","onChange","onSearch","onClick","message","closable","useCurrentWeather","useEffect","console","log","CityPreviewItem","memo","CSSTransition","in","timeout","classNames","unmountOnExit","appear","align","justify","span","width","src","title","suffix","to","toLowerCase","CityPreview","length","image","emptyImg","citiesJSX","map","Spinner","dateHelper","Date","getDay","date","leadZero","getHours","getMinutes","getDate","getMonth","getFullYear","num","String","CurrentWeather","Item","label","DayWeather","TabPane","Tabs","Forecast","forecastJSX","f","tab","CloseIcon","CloseOutlined","Home","setForecast","setForecastLoading","useCityDetails","cityName","useParams","fetchCurrentWeather","daily","_","idx","CityDetails","cityJSX","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5acdac94.chunk.js","sourcesContent":["import { Geolocation, City } from \"sharedTypes\";\r\n\r\nexport type GeolocationState = {\r\n  currentGeolocation: Geolocation;\r\n  cityList: City[];\r\n  loading: boolean;\r\n  error: null | string;\r\n};\r\n\r\nexport const SET_GEOLOCATION = \"@CITY/SET_GEOLOCATION\";\r\ntype SetGeolocation = {\r\n  type: typeof SET_GEOLOCATION;\r\n  payload: Geolocation;\r\n};\r\n\r\nexport const SET_CITY_WEATHER = \"@CITY/SET_CITY_WEATHER\";\r\ntype SetCityWeather = {\r\n  type: typeof SET_CITY_WEATHER;\r\n  payload: City;\r\n};\r\n\r\nexport const REMOVE_CITY = \"@CITY/REMOVE_CITY\";\r\ntype RemoveCity = {\r\n  type: typeof REMOVE_CITY;\r\n  payload: string;\r\n};\r\n\r\nexport const SET_LOADING = \"@CITY/SET_LOADING\";\r\ntype SetLoading = {\r\n  type: typeof SET_LOADING;\r\n  payload: boolean;\r\n};\r\n\r\nexport const SET_ERROR = \"@CITY/SET_ERROR\";\r\ntype SetError = {\r\n  type: typeof SET_ERROR;\r\n  payload: null | string;\r\n};\r\n\r\nexport type GeolocationActionTypes =\r\n  | SetGeolocation\r\n  | SetCityWeather\r\n  | SetLoading\r\n  | SetError\r\n  | RemoveCity;\r\n","import {\r\n  GeolocationState,\r\n  GeolocationActionTypes,\r\n  SET_GEOLOCATION,\r\n  SET_CITY_WEATHER,\r\n  REMOVE_CITY,\r\n  SET_LOADING,\r\n  SET_ERROR,\r\n} from \"./types\";\r\n\r\nconst initialState: GeolocationState = {\r\n  currentGeolocation: null,\r\n  cityList: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const cityReducer = (\r\n  state = initialState,\r\n  action: GeolocationActionTypes\r\n): GeolocationState => {\r\n  switch (action.type) {\r\n    case SET_GEOLOCATION:\r\n      return {\r\n        ...state,\r\n        currentGeolocation: action.payload,\r\n      };\r\n\r\n    case SET_LOADING:\r\n      return { ...state, loading: action.payload };\r\n\r\n    case SET_CITY_WEATHER:\r\n      const cityIndex = state.cityList.findIndex(\r\n        (city) => city.city === action.payload.city\r\n      );\r\n      if (cityIndex < 0)\r\n        return { ...state, cityList: [action.payload, ...state.cityList] };\r\n      else {\r\n        const newCityList = [...state.cityList];\r\n        newCityList.splice(cityIndex, 1);\r\n        newCityList.unshift(action.payload);\r\n        return { ...state, cityList: newCityList };\r\n      }\r\n\r\n    case REMOVE_CITY:\r\n      const newCitiesArr = state.cityList.filter(\r\n        (city) => city.city !== action.payload\r\n      );\r\n      return { ...state, cityList: newCitiesArr };\r\n\r\n    case SET_ERROR:\r\n      return { ...state, error: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { City, Forecast } from \"sharedTypes\";\r\n\r\nexport type WeatherState = {\r\n  city: City | null;\r\n  forecast: Forecast[] | null;\r\n  loading: boolean;\r\n  forecastLoading: boolean;\r\n  error: null | string;\r\n};\r\n\r\nexport const SET_CITY = \"@WEATHER/SET_CITY\";\r\ntype SetCity = {\r\n  type: typeof SET_CITY;\r\n  payload: City;\r\n};\r\n\r\nexport const SET_FORECAST = \"@WEATHER/SET_FORECAST\";\r\ntype SetForecast = {\r\n  type: typeof SET_FORECAST;\r\n  payload: Forecast[];\r\n};\r\n\r\nexport const SET_LOADING = \"@WEATHER/SET_LOADING\";\r\ntype SetLoading = {\r\n  type: typeof SET_LOADING;\r\n  payload: boolean;\r\n};\r\n\r\nexport const SET_FORECAST_LOADING = \"@WEATHER/SET_FORECAST_LOADING\";\r\ntype SetForecastLoading = {\r\n  type: typeof SET_FORECAST_LOADING;\r\n  payload: boolean;\r\n};\r\n\r\nexport type WeatherActionTypes =\r\n  | SetCity\r\n  | SetLoading\r\n  | SetForecast\r\n  | SetForecastLoading;\r\n","import {\r\n  WeatherState,\r\n  WeatherActionTypes,\r\n  SET_CITY,\r\n  SET_FORECAST,\r\n  SET_LOADING,\r\n  SET_FORECAST_LOADING,\r\n} from \"./types\";\r\n\r\nconst initialState: WeatherState = {\r\n  city: null,\r\n  forecast: null,\r\n  loading: false,\r\n  forecastLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const weatherReducer = (\r\n  state = initialState,\r\n  action: WeatherActionTypes\r\n): WeatherState => {\r\n  switch (action.type) {\r\n    case SET_CITY:\r\n      return { ...state, city: action.payload };\r\n\r\n    case SET_FORECAST:\r\n      return { ...state, forecast: action.payload };\r\n\r\n    case SET_LOADING:\r\n      return { ...state, loading: action.payload };\r\n\r\n    case SET_FORECAST_LOADING:\r\n      return { ...state, forecastLoading: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { cityReducer as city } from \"redux/bus/city/reducer\";\r\nimport { weatherReducer as weather } from \"redux/bus/weather/reducer\";\r\n\r\nexport const rootReducer = combineReducers({ city, weather });\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n","import { Middleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware: Middleware[] = [thunk];\r\n\r\nexport { middleware };\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport { rootReducer } from \"./init/rootReducer\";\r\nimport { middleware } from \"./init/middleware\";\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport \"./Layout.styles.scss\";\r\n\r\nconst Layout: FC = ({ children }): ReactElement => {\r\n  return <div className=\"layout\">{children}</div>;\r\n};\r\n\r\nexport default Layout;\r\n","import { AppState } from \"redux/init/rootReducer\";\r\n\r\nexport const city = {\r\n  currentGeolocation: (state: AppState) => state.city.currentGeolocation,\r\n  getCityList: (state: AppState) => state.city.cityList,\r\n  loading: (state: AppState) => state.city.loading,\r\n  error: (state: AppState) => state.city.error,\r\n};\r\n\r\nexport const weather = {\r\n  city: (state: AppState) => state.weather.city,\r\n  loading: (state: AppState) => state.weather.loading,\r\n  forecast: (state: AppState) => state.weather.forecast,\r\n  forecastLoading: (state: AppState) => state.weather.forecastLoading,\r\n};\r\n","import { City, Forecast } from \"sharedTypes\";\r\n\r\nexport const createWeatherObject = (weather: any): City => {\r\n  return {\r\n    city: weather.name,\r\n    temp: weather.main.temp,\r\n    pressure: weather.main.pressure,\r\n    humidity: weather.main.humidity,\r\n    windSpeed: weather.wind.speed,\r\n    sunrise: weather.sys.sunrise,\r\n    sunset: weather.sys.sunset,\r\n    description: weather.weather[0].description,\r\n    icon: weather.weather[0].icon,\r\n    lat: weather.coord.lat,\r\n    lon: weather.coord.lon,\r\n  };\r\n};\r\n\r\nexport const createForecastObject = (forecast: any): Forecast => {\r\n  return {\r\n    day: forecast.dt,\r\n    temp: forecast.temp.day,\r\n    pressure: forecast.pressure,\r\n    humidity: forecast.humidity,\r\n    windSpeed: forecast.wind_speed,\r\n    sunrise: forecast.sunrise,\r\n    sunset: forecast.sunset,\r\n    description: forecast.weather[0].description,\r\n    icon: forecast.weather.icon,\r\n  };\r\n};\r\n","const apiKey = \"19ff8438588c08e35b65d23d6b3a0490\";\r\nconst domain = \"http://api.openweathermap.org/data/\";\r\n\r\nconst api = {\r\n  getCurrentWeather: {\r\n    byCoordinates: async (lat: number, lon: number) => {\r\n      const res = await fetch(\r\n        `${domain}2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\r\n      );\r\n      if (!res.ok) throw new Error(res.statusText);\r\n      return res.json();\r\n    },\r\n\r\n    byCity: async (city: string) => {\r\n      const res = await fetch(\r\n        `${domain}2.5/weather?q=${city}&appid=${apiKey}&units=metric`\r\n      );\r\n      if (!res.ok) throw new Error(res.statusText);\r\n      return res.json();\r\n    },\r\n  },\r\n\r\n  getForecastWeather: {\r\n    byCoordinates: async (lat: number, lon: number) => {\r\n      const res = await fetch(\r\n        `${domain}2.5/onecall?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\r\n      );\r\n      if (!res.ok) throw new Error(res.statusText);\r\n      return res.json();\r\n    },\r\n  },\r\n};\r\n\r\nexport { api };\r\n","import {\r\n  GeolocationActionTypes,\r\n  SET_GEOLOCATION,\r\n  SET_CITY_WEATHER,\r\n  REMOVE_CITY,\r\n  SET_LOADING,\r\n  SET_ERROR,\r\n} from \"./types\";\r\nimport { createWeatherObject } from \"../../helpers\";\r\nimport { Geolocation, City } from \"sharedTypes\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppState } from \"redux/init/rootReducer\";\r\nimport { Action } from \"redux\";\r\nimport { api } from \"api\";\r\n\r\nexport const setGeolocation = (\r\n  payload: Geolocation\r\n): GeolocationActionTypes => ({\r\n  type: SET_GEOLOCATION,\r\n  payload,\r\n});\r\n\r\nexport const setCityWeather = (payload: City): GeolocationActionTypes => ({\r\n  type: SET_CITY_WEATHER,\r\n  payload,\r\n});\r\n\r\nexport const removeCity = (payload: string): GeolocationActionTypes => ({\r\n  type: REMOVE_CITY,\r\n  payload,\r\n});\r\n\r\nconst setLoading = (payload: boolean): GeolocationActionTypes => ({\r\n  type: SET_LOADING,\r\n  payload,\r\n});\r\n\r\nexport const setError = (payload: null | string): GeolocationActionTypes => ({\r\n  type: SET_ERROR,\r\n  payload,\r\n});\r\n\r\nexport const fetchCurrentWeatherByGeo = (\r\n  lat: number,\r\n  lon: number\r\n): ThunkAction<void, AppState, null, Action<string>> => async (dispatch) => {\r\n  try {\r\n    dispatch(setLoading(true));\r\n    dispatch(setError(null));\r\n    const weather = await api.getCurrentWeather.byCoordinates(lat, lon);\r\n    if (!weather) throw new Error(weather);\r\n    const currentWeather: City = createWeatherObject(weather);\r\n    console.log(weather);\r\n    dispatch(setCityWeather(currentWeather));\r\n    dispatch(setLoading(false));\r\n  } catch (err) {\r\n    dispatch(setError(err.message));\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\nexport const fetchCurrentWeatherByCity = (\r\n  city: string\r\n): ThunkAction<void, AppState, null, Action<string>> => async (dispatch) => {\r\n  try {\r\n    dispatch(setLoading(true));\r\n    dispatch(setError(null));\r\n    const weather = await api.getCurrentWeather.byCity(city);\r\n    if (!weather) throw new Error(weather);\r\n    const currentWeather: City = createWeatherObject(weather);\r\n    dispatch(setCityWeather(currentWeather));\r\n    dispatch(setLoading(false));\r\n  } catch (err) {\r\n    const errMessage =\r\n      city === \"\" ? \"Please, enter city name\" : `City ${city} not found`;\r\n    dispatch(setError(errMessage));\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { city } from \"redux/bus/selectors\";\r\n\r\nimport {\r\n  setGeolocation,\r\n  fetchCurrentWeatherByCity,\r\n} from \"redux/bus/city/actions\";\r\n\r\nexport const useGeolocationForm = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(city.loading);\r\n  const error = useSelector(city.error);\r\n\r\n  const [cityInput, setCityInput] = React.useState<string>(\"\");\r\n\r\n  const getCurrentGeolocation = () => {\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition((pos) =>\r\n        dispatch(\r\n          setGeolocation({\r\n            latitude: pos.coords.latitude,\r\n            longitude: pos.coords.longitude,\r\n          })\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const geolocationHandler = () => {\r\n    getCurrentGeolocation();\r\n  };\r\n\r\n  const cityInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCityInput(e.target.value);\r\n  };\r\n\r\n  const citySearchHandler = () => {\r\n    setCityInput(\"\");\r\n    dispatch(fetchCurrentWeatherByCity(cityInput));\r\n  };\r\n\r\n  return {\r\n    error,\r\n    loading,\r\n    cityInput,\r\n    geolocationHandler,\r\n    cityInputHandler,\r\n    citySearchHandler,\r\n  };\r\n};\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { useGeolocationForm } from \"hooks/useGeolocationForm\";\r\n\r\nimport { Input, Button, Alert } from \"antd\";\r\nimport \"./GeolocationForm.styles.scss\";\r\nconst { Search } = Input;\r\n\r\nconst GeolocationForm: FC = (): ReactElement => {\r\n  const {\r\n    error,\r\n    loading,\r\n    cityInput,\r\n    geolocationHandler,\r\n    cityInputHandler,\r\n    citySearchHandler,\r\n  } = useGeolocationForm();\r\n\r\n  return (\r\n    <div className=\"geolocation_form\">\r\n      <div className=\"geolocation_form__inputs\">\r\n        <Search\r\n          placeholder=\"Type city name\"\r\n          enterButton=\"Search\"\r\n          size=\"large\"\r\n          value={cityInput}\r\n          loading={loading}\r\n          onChange={cityInputHandler}\r\n          onSearch={citySearchHandler}\r\n          className=\"geolocation_form__search-bar\"\r\n        />\r\n        <Button\r\n          onClick={geolocationHandler}\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          className=\"geolocation_form__current-btn\"\r\n        >\r\n          Get current location\r\n        </Button>\r\n      </div>\r\n\r\n      {error && <Alert message={error} type=\"error\" closable />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeolocationForm;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { city } from \"redux/bus/selectors\";\r\nimport { fetchCurrentWeatherByGeo } from \"redux/bus/city/actions\";\r\n\r\nexport const useCurrentWeather = () => {\r\n  const dispatch = useDispatch();\r\n  const currentGeolocation = useSelector(city.currentGeolocation);\r\n  const cityList = useSelector(city.getCityList);\r\n  const loading = useSelector(city.loading);\r\n  React.useEffect(() => {\r\n    if (currentGeolocation) {\r\n      dispatch(\r\n        fetchCurrentWeatherByGeo(\r\n          currentGeolocation.latitude,\r\n          currentGeolocation.longitude\r\n        )\r\n      );\r\n    }\r\n  }, [currentGeolocation, dispatch]);\r\n\r\n  return { cityList, loading };\r\n};\r\n","import React, { FC, ReactElement } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { removeCity } from \"redux/bus/city/actions\";\r\n\r\nimport { Row, Col, Image, Statistic } from \"antd\";\r\nimport { CloseIcon } from \"components\";\r\n\r\nimport { City } from \"sharedTypes\";\r\n\r\nimport \"./CityPreviewItem.styles.scss\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\ntype PropTypes = {\r\n  city: City;\r\n};\r\n\r\nconst CityPreviewItem: FC<PropTypes> = React.memo(\r\n  ({ city }): ReactElement => {\r\n    const dispatch = useDispatch();\r\n\r\n    console.log(\"render \" + city.city);\r\n\r\n    const closeCityHandler = () => {\r\n      dispatch(removeCity(city.city));\r\n    };\r\n\r\n    return (\r\n      <CSSTransition\r\n        in={true}\r\n        timeout={1000}\r\n        classNames=\"city-priview-item__transition\"\r\n        unmountOnExit\r\n        appear\r\n      >\r\n        <div className=\"city-priview-item\">\r\n          <div className=\"city-priview-item__header\">\r\n            <h3>{city.city}</h3>\r\n            <CloseIcon onClick={closeCityHandler} />\r\n          </div>\r\n          <Row\r\n            align=\"middle\"\r\n            justify=\"center\"\r\n            className=\"city-priview-item__content\"\r\n          >\r\n            <Col span={3}>\r\n              <Image\r\n                width={40}\r\n                src={`http://openweathermap.org/img/wn/${city.icon}@2x.png`}\r\n              />\r\n            </Col>\r\n            <Col span={8}>\r\n              <Statistic\r\n                title=\"Temperature\"\r\n                value={`${city.temp}`}\r\n                suffix=\"&#8451;\"\r\n              />\r\n            </Col>\r\n            <Col span={10}>\r\n              <Statistic title=\"Description\" value={city.description} />\r\n            </Col>\r\n            <Col span={3}>\r\n              <Link to={`/${city.city.toLowerCase()}`}>More info</Link>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n);\r\n\r\nexport default CityPreviewItem;\r\n","export default __webpack_public_path__ + \"static/media/empty.d6ef4d19.png\";","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { Spinner } from \"components\";\r\n\r\nimport { useCurrentWeather } from \"hooks/useCurrentWeather\";\r\nimport { City } from \"sharedTypes\";\r\nimport CityPreviewItem from \"./CityPreviewItem/CityPreviewItem\";\r\n\r\nimport { Empty } from \"antd\";\r\nimport emptyImg from \"assets/images/empty.png\";\r\n\r\nconst CityPreview: FC = (): ReactElement => {\r\n  const { cityList, loading } = useCurrentWeather();\r\n\r\n  if (cityList.length === 0) {\r\n    if (loading) return <Spinner />;\r\n    else return <Empty description=\"No cities\" image={emptyImg} />;\r\n  }\r\n\r\n  const citiesJSX = cityList.map((city: City) => {\r\n    return <CityPreviewItem key={city.city} city={city} />;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {loading ? <Spinner /> : null}\r\n      {citiesJSX}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityPreview;\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { Spin } from \"antd\";\r\nimport \"./Spinner.styles.scss\";\r\n\r\nconst Spinner: FC = (): ReactElement => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <Spin />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","export const dateHelper = {\r\n  getDayName: (dt: number): string => {\r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n    const date = new Date(dt * 1000);\r\n    return days[date.getDay()];\r\n  },\r\n\r\n  getTime: (dt: number): string => {\r\n    const date = new Date(dt * 1000);\r\n    return `${leadZero(date.getHours())}:${leadZero(date.getMinutes())}`;\r\n  },\r\n\r\n  getDate: (dt: number): string => {\r\n    const date = new Date(dt * 1000);\r\n    return `${leadZero(date.getDate())}.${leadZero(\r\n      date.getMonth() + 1\r\n    )}.${date.getFullYear()}`;\r\n  },\r\n};\r\n\r\nconst leadZero = (num: number): string => {\r\n  if (num < 10) return \"0\" + num;\r\n  return String(num);\r\n};\r\n","import React, { FC, ReactElement } from \"react\";\r\nimport { Descriptions, Image } from \"antd\";\r\nimport { City } from \"sharedTypes\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport { dateHelper } from \"utils/dateHelper\";\r\n\r\nimport \"./CurentWeather.styles.scss\";\r\n\r\ntype PropTypes = {\r\n  city: City;\r\n};\r\n\r\nconst CurrentWeather: FC<PropTypes> = ({ city }): ReactElement => {\r\n  return (\r\n    <CSSTransition\r\n      in={true}\r\n      timeout={1000}\r\n      classNames=\"current-weather__transition\"\r\n      unmountOnExit\r\n      appear\r\n    >\r\n      <div className=\"current-weather\">\r\n        <div className=\"current-weather__header\">\r\n          <h3>{city.city} - Current Weather</h3>\r\n        </div>\r\n        <div className=\"current-weather__content\">\r\n          <Image\r\n            width={40}\r\n            src={`http://openweathermap.org/img/wn/${city.icon}@2x.png`}\r\n            className=\"current-weather__icon\"\r\n          />\r\n          <Descriptions className=\"current-weather__info\">\r\n            <Descriptions.Item label=\"Description\">\r\n              {city.description}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Temperature\">\r\n              {city.temp} &#8451;\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Pressure\">\r\n              {city.pressure} mm\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Humidity\">\r\n              {city.humidity}%\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Sunrise\">\r\n              {dateHelper.getTime(city.sunrise)}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Sunset\">\r\n              {dateHelper.getTime(city.sunset)}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"Wind speed\">\r\n              {city.windSpeed} m/s\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { Forecast } from \"sharedTypes\";\r\nimport { dateHelper } from \"utils/dateHelper\";\r\nimport { Statistic, Row, Col } from \"antd\";\r\n\r\ntype PropTypes = {\r\n  forecast: Forecast;\r\n};\r\n\r\nconst DayWeather: FC<PropTypes> = ({ forecast }): ReactElement => {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={8}>\r\n          <Statistic title=\"Date\" value={dateHelper.getDate(forecast.day)} />\r\n        </Col>\r\n        <Col span={8}>\r\n          <Statistic title=\"Description\" value={forecast.description} />\r\n        </Col>\r\n        <Col span={8}>\r\n          <Statistic title=\"Temperature\" value={`${forecast.temp} ℃`} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={8}>\r\n          <Statistic title=\"Pressure\" value={`${forecast.pressure} mm`} />\r\n        </Col>\r\n        <Col span={8}>\r\n          <Statistic title=\"Humidity\" value={`${forecast.humidity}%`} />\r\n        </Col>\r\n        <Col span={8}>\r\n          <Statistic title=\"Wind Speed\" value={`${forecast.windSpeed} m/s`} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={8}>\r\n          <Statistic\r\n            title=\"Sunrise\"\r\n            value={dateHelper.getTime(forecast.sunrise)}\r\n          />\r\n        </Col>\r\n        <Col span={8}>\r\n          <Statistic\r\n            title=\"Sunset\"\r\n            value={dateHelper.getTime(forecast.sunset)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayWeather;\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Tabs } from \"antd\";\r\n\r\nimport { weather } from \"redux/bus/selectors\";\r\nimport { dateHelper } from \"utils/dateHelper\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport DayWeather from \"./DayWeather/DayWeather\";\r\nimport { Spinner } from \"components\";\r\n\r\nimport \"./Forecast.styles.scss\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst Forecast: FC = (): ReactElement => {\r\n  const forecast = useSelector(weather.forecast);\r\n  const loading = useSelector(weather.forecastLoading);\r\n\r\n  const forecastJSX =\r\n    forecast &&\r\n    forecast.map((f) => {\r\n      return (\r\n        <TabPane key={f.day} tab={dateHelper.getDayName(f.day)}>\r\n          <DayWeather forecast={f} />\r\n        </TabPane>\r\n      );\r\n    });\r\n\r\n  if (forecastJSX)\r\n    return (\r\n      <CSSTransition\r\n        in={true}\r\n        timeout={1000}\r\n        classNames=\"forecast__transition\"\r\n        unmountOnExit\r\n        appear\r\n      >\r\n        <div className=\"forecast\">\r\n          <h3 className=\"forecast__header\">Week Forecast</h3>\r\n          <Tabs className=\"forecast__tabs\">{forecastJSX}</Tabs>\r\n        </div>\r\n      </CSSTransition>\r\n    );\r\n\r\n  if (loading) return <Spinner />;\r\n  return <div>not found</div>;\r\n};\r\n\r\nexport default Forecast;\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport \"./CloseIcon.styles.scss\";\r\n\r\ntype PropTypes = {\r\n  onClick: () => void;\r\n};\r\n\r\nconst CloseIcon: FC<PropTypes> = ({ onClick }): ReactElement => {\r\n  return (\r\n    <div className=\"close-icon\" onClick={onClick}>\r\n      <CloseOutlined />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CloseIcon;\r\n","import React, { FC, ReactElement } from \"react\";\r\n\r\nimport { GeolocationForm, CityPreview } from \"components\";\r\n\r\nconst Home: FC = (): ReactElement => {\r\n  return (\r\n    <div>\r\n      <GeolocationForm />\r\n      <CityPreview />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import {\r\n  WeatherActionTypes,\r\n  SET_CITY,\r\n  SET_FORECAST,\r\n  SET_LOADING,\r\n  SET_FORECAST_LOADING,\r\n} from \"./types\";\r\nimport { City, Forecast } from \"sharedTypes\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { AppState } from \"redux/init/rootReducer\";\r\nimport { Action } from \"redux\";\r\nimport { api } from \"api\";\r\nimport { createWeatherObject, createForecastObject } from \"../../helpers\";\r\n\r\nexport const setCity = (payload: City): WeatherActionTypes => ({\r\n  type: SET_CITY,\r\n  payload,\r\n});\r\n\r\nexport const setForecast = (payload: Forecast[]) => ({\r\n  type: SET_FORECAST,\r\n  payload,\r\n});\r\n\r\nexport const setLoading = (payload: boolean): WeatherActionTypes => ({\r\n  type: SET_LOADING,\r\n  payload,\r\n});\r\n\r\nexport const setForecastLoading = (payload: boolean): WeatherActionTypes => ({\r\n  type: SET_FORECAST_LOADING,\r\n  payload,\r\n});\r\n\r\nexport const fetchCurrentWeather = (\r\n  city: string\r\n): ThunkAction<void, AppState, null, Action<string>> => async (dispatch) => {\r\n  try {\r\n    dispatch(setLoading(true));\r\n    const weather = await api.getCurrentWeather.byCity(city);\r\n    if (!weather) throw new Error(weather);\r\n    const currentWeather: City = createWeatherObject(weather);\r\n    dispatch(setCity(currentWeather));\r\n    dispatch(setLoading(false));\r\n  } catch (err) {\r\n    console.log(err.message);\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\nexport const fetchForecastWeather = (\r\n  lat: number,\r\n  lon: number\r\n): ThunkAction<void, AppState, null, Action<string>> => async (dispatch) => {\r\n  try {\r\n    dispatch(setForecastLoading(true));\r\n    const weather = await api.getForecastWeather.byCoordinates(lat, lon);\r\n    if (!weather) throw new Error(weather);\r\n    const forecast = weather.daily\r\n      .filter((_: any, idx: number) => idx !== 0)\r\n      .map(\r\n        (daily: any): Forecast => {\r\n          return createForecastObject(daily);\r\n        }\r\n      );\r\n    dispatch(setForecast(forecast));\r\n    dispatch(setForecastLoading(false));\r\n  } catch (err) {\r\n    console.log(err.message);\r\n    dispatch(setForecast([]));\r\n    dispatch(setForecastLoading(false));\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  fetchCurrentWeather,\r\n  fetchForecastWeather,\r\n} from \"redux/bus/weather/actions\";\r\nimport { weather } from \"redux/bus/selectors\";\r\n\r\ntype ParamTypes = {\r\n  cityName: string;\r\n};\r\n\r\nexport const useCityDetails = () => {\r\n  const { cityName } = useParams<ParamTypes>();\r\n  const dispatch = useDispatch();\r\n\r\n  const city = useSelector(weather.city);\r\n  const loading = useSelector(weather.loading);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchCurrentWeather(cityName));\r\n  }, [dispatch, cityName]);\r\n\r\n  React.useEffect(() => {\r\n    if (city) {\r\n      dispatch(fetchForecastWeather(city.lat, city.lon));\r\n    }\r\n  }, [dispatch, city]);\r\n\r\n  return { city, loading };\r\n};\r\n","import React, { FC, ReactElement } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { CurrentWeather, Forecast, Spinner } from \"components\";\r\nimport { Breadcrumb, Empty } from \"antd\";\r\nimport emptyImg from \"assets/images/empty.png\";\r\n\r\nimport { useCityDetails } from \"hooks/useCityDetails\";\r\n\r\nconst CityDetails: FC = (): ReactElement => {\r\n  const { city, loading } = useCityDetails();\r\n\r\n  const cityJSX = city ? (\r\n    <>\r\n      <CurrentWeather city={city} />\r\n      <Forecast />\r\n    </>\r\n  ) : (\r\n    <Empty description=\"City not found\" image={emptyImg} />\r\n  );\r\n\r\n  return loading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>\r\n          <Link to=\"/\">&#8592; Home</Link>\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {cityJSX}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityDetails;\r\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport \"antd/dist/antd.css\";\n\nimport { Layout } from \"components\";\nimport { Home, CityDetails } from \"pages\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Layout>\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/:cityName\" component={CityDetails} />\n        </Switch>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { store } from \"redux/store\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}